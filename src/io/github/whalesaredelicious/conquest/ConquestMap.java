/*
 * Copyright (C) 2014 Weilon
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the Creative Commons Attribution-ShareAlike 4.0
 * International as published by the Creative Commons Organisation.
 *
 * You are free to copy, redistribute and create derivative works
 * from the material under the condition appropriate credit is
 * given to the creator. In addition, if you remix, transform or
 * build upon the material, you must distribute your contributions under
 * the same license as the original.
 *
 * You may get a copy of the license here: https://creativecommons.org/licenses/by-sa/4.0/
 */

package io.github.whalesaredelicious.conquest;

import java.awt.Point;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

public class ConquestMap extends JFrame {
    private static int intMoveAmount = 60;
    private static Point[][] pointLocation = new Point[15][10];
    
    public static int[][] intUnit1_1Coords = new int[15][10];
    public static int[][] intUnit1_2Coords = new int[15][10];
    public static int[][] intUnit1_3Coords = new int[15][10];
    public static int[][] intUnit2_1Coords = new int[15][10];
    public static int[][] intUnit2_2Coords = new int[15][10];
    public static int[][] intUnit2_3Coords = new int[15][10];
    
    public static boolean[][] booleanGridOccupied = new boolean[15][10];
    
    /**
     * Creates new form ConquestMap
     */
    public ConquestMap() {
        super("Conquest (Map)");
        initComponents();
        initLocations();
        setSize(900, 600);
        setResizable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblUnit1_1 = new javax.swing.JLabel();
        lblUnit1_2 = new javax.swing.JLabel();
        lblUnit1_3 = new javax.swing.JLabel();
        lblUnit2_1 = new javax.swing.JLabel();
        lblUnit2_2 = new javax.swing.JLabel();
        lblUnit2_3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblUnit1_1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/io/github/whalesaredelicious/conquest/assets/soldier.png"))); // NOI18N

        lblUnit1_2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/io/github/whalesaredelicious/conquest/assets/soldier.png"))); // NOI18N

        lblUnit1_3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/io/github/whalesaredelicious/conquest/assets/soldier.png"))); // NOI18N

        lblUnit2_1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/io/github/whalesaredelicious/conquest/assets/soldier.png"))); // NOI18N

        lblUnit2_2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/io/github/whalesaredelicious/conquest/assets/soldier.png"))); // NOI18N

        lblUnit2_3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/io/github/whalesaredelicious/conquest/assets/soldier.png"))); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(58, 58, 58)
                        .addComponent(lblUnit2_3))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblUnit2_2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblUnit2_1)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(lblUnit1_3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblUnit1_1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblUnit1_2)
                .addContainerGap(784, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(lblUnit2_1))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblUnit1_1)
                            .addComponent(lblUnit1_2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblUnit1_3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 364, Short.MAX_VALUE)
                        .addComponent(lblUnit2_3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblUnit2_2)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    //The main method - used if this class is not called from Conquest.java for any reason
    public static void main(String args[]) {
        msgBox("The Map can only be opened from the main program. Please run "
                + "Conquest by double clicking Conquest.jar instead", "Error", "error");
        System.exit(0);
        
        //Backup code if the user bypasses System.exit(0) somehow.
        msgBox("Conquest is running incorrectly. Please close this program "
                + "and notify the developer", "Warning", "warning");
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ConquestMap.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ConquestMap.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ConquestMap.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ConquestMap.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ConquestMap().setVisible(true);
            }
        });
    }
    public static void moveTest() {
        lblUnit1_1.setLocation(pointLocation[6][9]);
    }
    public static void move(int moveDirection) {
        //1 = up, 2 = right, 3 = down, 4 = left
        if (Conquest.booleanIsPlayer1Turn) {
            for (int i = 0; i < Conquest.booleanPlayer1UnitSelected.length; i++) {
                if (Conquest.booleanPlayer1UnitSelected[i]) {
                    moveUnit(i, moveDirection);
                }
            }
        }
        else {
            for (int i = 0; i < Conquest.booleanPlayer2UnitSelected.length; i++) {
                if (Conquest.booleanPlayer2UnitSelected[i]) {
                    moveUnit(i + 3, moveDirection);
                }
            }
        }
    }
    private static void moveUnit(int unitSelected, int moveDirection) {
        switch (unitSelected) {
            case 0:
                lblUnit1_1.setLocation(newLocation(lblUnit1_1, moveDirection));
                break;
            case 1:
                lblUnit1_2.setLocation(newLocation(lblUnit1_2, moveDirection));
                break;
            case 2:
                lblUnit1_3.setLocation(newLocation(lblUnit1_3, moveDirection));
                break;
            case 3:
                lblUnit2_1.setLocation(newLocation(lblUnit2_1, moveDirection));
                break;
            case 4:
                lblUnit2_2.setLocation(newLocation(lblUnit2_2, moveDirection));
                break;
            case 5:
                lblUnit2_3.setLocation(newLocation(lblUnit2_3, moveDirection));
                break;
            default:
                log("Invalid unit selection");
                break;
        }
    }
    private static Point newLocation(JLabel unit, int moveDirection) {
        //1 = up, 2 = right, 3 = down, 4 = left
        Point pointNewLocation = new Point();
        pointNewLocation.x = unit.getLocation().x;
        pointNewLocation.y = unit.getLocation().y;
        switch (moveDirection) {
            case 1:
                pointNewLocation.y = pointNewLocation.y - intMoveAmount;
                break;
            case 2:
                pointNewLocation.x = pointNewLocation.x + intMoveAmount;
                break;
            case 3:
                pointNewLocation.y = pointNewLocation.y + intMoveAmount;
                break;
            case 4:
                pointNewLocation.x = pointNewLocation.x - intMoveAmount;
                break;
            default:
                log("Invalid move direction");
                break;
        }
        return pointNewLocation;
    }
    private void initLocations() {
        initPointLocation();
        initUnitCoords();
        initGridOccupied();
    }
    private void initPointLocation() {
        //Make possible location points
        //Grid is 15 x 10.
        for (int x = 0; x < pointLocation.length; x++) {
            for (int y = 0; y < pointLocation[y].length; y++) {
                pointLocation[x][y] = new Point();
                log(Integer.toString(x) + ", " + Integer.toString(y));
                pointLocation[x][y].x = x * 60;
                pointLocation[x][y].y = y * 60;
                
            }
        }
    }
    private void initUnitCoords() {
        
    }
    private void initGridOccupied() {
        
    }
    private static void log(String message) {
        System.out.println(message);
    }
    private static void msgBox(String message, String title, String messageType) { //Method to make sending of message dialog boxes to the user easier to do.
        if (messageType == null) { //If programmer is uninterested in looking up dialog box types, just use null.
            JOptionPane.showMessageDialog(null, message, title, JOptionPane.PLAIN_MESSAGE);
        }
        else {
            messageType = messageType.toLowerCase(); //Ensures strings with capitalised letters do not get misinterpreted.
            switch (messageType) { //Use of simple keywords in order to make dialog box creation easier and less tedious.
                case "info": //Information message dialog box
                    JOptionPane.showMessageDialog(null, message, title, JOptionPane.INFORMATION_MESSAGE);
                    break;
                case "warning": //Warning message dialog box
                    JOptionPane.showMessageDialog(null, message, title, JOptionPane.WARNING_MESSAGE);
                    break;
                case "error": //Error message dialog box
                    JOptionPane.showMessageDialog(null, message, title, JOptionPane.ERROR_MESSAGE);
                    break;
                case "plain": //Plain message dialog box
                    JOptionPane.showMessageDialog(null, message, title, JOptionPane.PLAIN_MESSAGE);
                    break;
                default: //If messageType is not any of the above, default to plain message.
                    log("messageType string value: " + messageType + " could not be recognised. Defaulting to plain message."); //Inform programmer of this.
                    JOptionPane.showMessageDialog(null, message, title, JOptionPane.PLAIN_MESSAGE);
                    break;
            }
        }
    }
    //Auto-generated code below.
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private static javax.swing.JLabel lblUnit1_1;
    private static javax.swing.JLabel lblUnit1_2;
    private static javax.swing.JLabel lblUnit1_3;
    private static javax.swing.JLabel lblUnit2_1;
    private static javax.swing.JLabel lblUnit2_2;
    private static javax.swing.JLabel lblUnit2_3;
    // End of variables declaration//GEN-END:variables
}

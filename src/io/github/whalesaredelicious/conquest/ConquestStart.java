/*
 * Copyright (C) 2014 Weilon
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the Creative Commons Attribution-ShareAlike 4.0
 * International as published by the Creative Commons Organisation.
 *
 * You are free to copy, redistribute and create derivative works
 * from the material under the condition appropriate credit is
 * given to the creator. In addition, if you remix, transform or
 * build upon the material, you must distribute your contributions under
 * the same license as the original.
 *
 * You may get a copy of the license here: https://creativecommons.org/licenses/by-sa/4.0/
 */

package io.github.whalesaredelicious.conquest;

import java.awt.Frame;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import javax.swing.JDialog;
import javax.swing.JOptionPane;

/**
 *
 * @author Weilon
 */
public class ConquestStart extends JDialog {
    //Declare player names
    public static String stringPlayer1Name = "Player 1";
    public static String stringPlayer2Name = "Player 2";
    /**
     * Creates new form ConquestStart
     */
    public ConquestStart(Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        setSize(400, 300);
        setResizable(false);
        initCloseListener();
        setLocationRelativeTo(null);
    }
    public void initCloseListener() {
        //Exit the program entirely if X button is pressed.
        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {
                System.exit(0);
            }
        });
    }
    /**
     * AUTO-GENERATED CODE. DO NOT EDIT.
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtfieldPlayer1 = new javax.swing.JTextField();
        txtfieldPlayer2 = new javax.swing.JTextField();
        lblTitle = new javax.swing.JLabel();
        btnExit = new javax.swing.JButton();
        btnStartGame = new javax.swing.JButton();
        lblPlayer1Heading = new javax.swing.JLabel();
        lblPlayer2Heading = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        btnHowToPlay = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Conquest");
        setName("dialogStartWindow"); // NOI18N
        setResizable(false);

        txtfieldPlayer1.setText("Player 1");

        txtfieldPlayer2.setText("Player 2");

        lblTitle.setFont(new java.awt.Font("Garamond", 1, 48)); // NOI18N
        lblTitle.setText("Conquest");

        btnExit.setText("Exit");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        btnStartGame.setText("Start Game");
        btnStartGame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStartGameActionPerformed(evt);
            }
        });

        lblPlayer1Heading.setFont(new java.awt.Font("Garamond", 0, 18)); // NOI18N
        lblPlayer1Heading.setText("Player 1");

        lblPlayer2Heading.setFont(new java.awt.Font("Garamond", 0, 18)); // NOI18N
        lblPlayer2Heading.setText("Player 2");

        jLabel1.setFont(new java.awt.Font("Garamond", 0, 24)); // NOI18N
        jLabel1.setText("Enter Player Names");

        btnHowToPlay.setText("How To Play");
        btnHowToPlay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHowToPlayActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addComponent(lblPlayer1Heading)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblPlayer2Heading)
                .addGap(54, 54, 54))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnStartGame)
                        .addGap(56, 56, 56)
                        .addComponent(btnHowToPlay)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnExit, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtfieldPlayer1, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(txtfieldPlayer2, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(lblTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(90, 90, 90)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPlayer1Heading)
                    .addComponent(lblPlayer2Heading))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtfieldPlayer1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtfieldPlayer2, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnStartGame, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnHowToPlay, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnExit, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    //Event-driven methods for responding to button presses.
    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        System.exit(0); //Exit the program entirely.
    }//GEN-LAST:event_btnExitActionPerformed

    private void btnStartGameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStartGameActionPerformed
        getNames(); //Call the getNames method.
    }//GEN-LAST:event_btnStartGameActionPerformed

    private void btnHowToPlayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHowToPlayActionPerformed
        new ConquestHowToPlay(null, true).setVisible(true);
    }//GEN-LAST:event_btnHowToPlayActionPerformed
    
    private void getNames() {
        /**
         * This method checks the name lengths. If it's over 30, game will not
         * start. This is to prevent player names from overflowing the window
         * and causing graphical issues.
         */
        boolean booleanNameCheckFlag = false;
        stringPlayer1Name = txtfieldPlayer1.getText();
        stringPlayer2Name = txtfieldPlayer2.getText();
        
        //Check name length
        if (stringPlayer1Name.length() > 20) {
            booleanNameCheckFlag = true;
            msgBox("Player 1's name is too long! Maximum 30 characters.", "Warning", "warning");
        }
        if (stringPlayer2Name.length() > 20) {
            booleanNameCheckFlag = true;
            msgBox("Player 2's name is too long! Maximum 30 characters.", "Warning", "warning");
        }
        
        //If name check did not trigger the flag, proceed.
        if (booleanNameCheckFlag) {
            //Do nothing.
            log("One of the players' names is too long.");
        }
        else {
            Conquest.stringPlayer1 = stringPlayer1Name;
            Conquest.stringPlayer2 = stringPlayer2Name;
            log("Name check cleared. Rolling the dice to see who goes first.");
            rollDice();
            this.dispose(); //Close the window
        }
    }
    private void rollDice() { //roll the dice to see who goes first
        int intPlayer1Roll = RandomIntGenerator(1, 6);
        int intPlayer2Roll = RandomIntGenerator(1, 6);
        boolean booleanRollDone = false;
        while(!booleanRollDone) { //while booleanRollDone = false
            //If draw, reroll the dice
            if (intPlayer1Roll == intPlayer2Roll) {
                intPlayer1Roll = RandomIntGenerator(1, 6);
                intPlayer2Roll = RandomIntGenerator(1,6);
            }
            //if player 1 roll > player 2 roll, player 1 goes first, and vice versa.
            if (intPlayer1Roll > intPlayer2Roll) {
                Conquest.booleanIsPlayer1Turn = true;
                Conquest.stringPlayerTurn = stringPlayer1Name;
                msgBox(stringPlayer1Name + " has rolled a " + Integer.toString(intPlayer1Roll) 
                        + " and " + stringPlayer2Name + " has rolled a "
                        + Integer.toString(intPlayer2Roll) + ". " + stringPlayer1Name + 
                        " will go first.", "Dice Roll", "plain");
                booleanRollDone = true;
            }
            if (intPlayer2Roll > intPlayer1Roll) {
                Conquest.booleanIsPlayer1Turn = false;
                Conquest.stringPlayerTurn = stringPlayer2Name;
                msgBox(stringPlayer1Name + " has rolled a " + Integer.toString(intPlayer1Roll) 
                        + " and " + stringPlayer2Name + " has rolled a "
                        + Integer.toString(intPlayer2Roll) + ". " + stringPlayer2Name + 
                        " will go first.", "Dice Roll", "plain");
                booleanRollDone = true;
            }
        }
    }
    private int RandomIntGenerator(int minvalue, int maxvalue) { //Generates a random integer between a set minimum and maximum value
        int number = (minvalue + (int)(Math.random() * ((maxvalue - minvalue) + 1)));
        return number;
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ConquestStart.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ConquestStart.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ConquestStart.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ConquestStart.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                ConquestStart dialog = new ConquestStart(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    private static void msgBox(String message, String title, String messageType) { //Method to make sending of message dialog boxes to the user easier to do.
        if (messageType == null) { //If programmer is uninterested in looking up dialog box types, just use null.
            JOptionPane.showMessageDialog(null, message, title, JOptionPane.PLAIN_MESSAGE);
        }
        else {
            messageType = messageType.toLowerCase(); //Ensures strings with capitalised letters do not get misinterpreted.
            switch (messageType) { //Use of simple keywords in order to make dialog box creation easier and less tedious.
                case "info": //Information message dialog box
                    JOptionPane.showMessageDialog(null, message, title, JOptionPane.INFORMATION_MESSAGE);
                    break;
                case "warning": //Warning message dialog box
                    JOptionPane.showMessageDialog(null, message, title, JOptionPane.WARNING_MESSAGE);
                    break;
                case "error": //Error message dialog box
                    JOptionPane.showMessageDialog(null, message, title, JOptionPane.ERROR_MESSAGE);
                    break;
                case "plain": //Plain message dialog box
                    JOptionPane.showMessageDialog(null, message, title, JOptionPane.PLAIN_MESSAGE);
                    break;
                default: //If messageType is not any of the above, default to plain message.
                    log("messageType string value: " + messageType + " could not be recognised. Defaulting to plain message."); //Inform programmer of this.
                    JOptionPane.showMessageDialog(null, message, title, JOptionPane.PLAIN_MESSAGE);
                    break;
            }
        }
    }
    //Log method - not necessary, but makes typing out code for printing to console easier.
    private static void log(String message) {
        System.out.println(message);
    }
    //Auto-generated code below
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnHowToPlay;
    private javax.swing.JButton btnStartGame;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel lblPlayer1Heading;
    private javax.swing.JLabel lblPlayer2Heading;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTextField txtfieldPlayer1;
    private javax.swing.JTextField txtfieldPlayer2;
    // End of variables declaration//GEN-END:variables
}
